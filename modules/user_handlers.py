import random
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from .models import Session, User, ReferralBonus, TourRequest


def generate_referral_code():
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É"""
    code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    return code


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    keyboard = [
        [KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É üì±",
        reply_markup=reply_markup
    )


async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    if not update.message.contact:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        return

    phone_number = update.message.contact.phone_number
    user_id = update.effective_user.id

    with Session() as session:
        user = session.query(User).filter_by(telegram_id=user_id).first()

        if not user:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            referral_code = generate_referral_code()
            user = User(
                telegram_id=user_id,
                phone_number=phone_number,
                referral_code=referral_code
            )

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É
            if 'referral_code' in context.user_data:
                referrer = session.query(User).filter_by(referral_code=context.user_data['referral_code']).first()
                if referrer:
                    user.referred_by = referrer.id
                    # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                    referrer.balance += 100
                    bonus = ReferralBonus(
                        user_id=referrer.id,
                        amount=100,
                        description=f"–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {phone_number}"
                    )
                    session.add(bonus)

            session.add(user)
            session.commit()

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton("üîó –ú–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è")],
                [KeyboardButton("üèñ –ü—ñ–¥–±—ñ—Ä —Ç—É—Ä—É")],
                [KeyboardButton("‚Ñπ –ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É")],
                [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")],
                [KeyboardButton("üõ† –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
            message = "–î—è–∫—É—é! –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ ‚úÖ\n"
            if user.referred_by:
                message += "–í–∞—à –¥—Ä—É–≥ –æ—Ç—Ä–∏–º–∞–≤ +100 –≥—Ä–Ω –∑–∞ –≤–∞—à–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è!\n"
            message += f"–í–∞—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: t.me/MyNewArtembot?start={referral_code}"

            await update.message.reply_text(message, reply_markup=reply_markup)
        else:
            # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω—é –¥–ª—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            keyboard = [
                [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton("üîó –ú–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è")],
                [KeyboardButton("üèñ –ü—ñ–¥–±—ñ—Ä —Ç—É—Ä—É")],
                [KeyboardButton("‚Ñπ –ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É")],
                [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")],
                [KeyboardButton("üõ† –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ!", reply_markup=reply_markup)


async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = update.effective_user.id
    with Session() as session:
        user = session.query(User).filter_by(telegram_id=user_id).first()

        if user:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            first_level = session.query(User).filter_by(referred_by=user.id).count()
            second_level = session.query(User).filter(
                User.referred_by.in_(
                    session.query(User.id).filter_by(referred_by=user.id)
                )
            ).count()
            third_level = session.query(User).filter(
                User.referred_by.in_(
                    session.query(User.id).filter(
                        User.referred_by.in_(
                            session.query(User.id).filter_by(referred_by=user.id)
                        )
                    )
                )
            ).count()

            stats_text = (
                f"üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n"
                f"üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} –≥—Ä–Ω\n\n"
                f"üë• –í–ê–®–Ü –†–ï–§–ï–†–ê–õ–ò:\n"
                f"‚îú‚îÄ‚îÄ 1-–π —Ä—ñ–≤–µ–Ω—å: {first_level} –æ—Å—ñ–± ({first_level * 100} –≥—Ä–Ω)\n"
                f"‚îú‚îÄ‚îÄ 2-–π —Ä—ñ–≤–µ–Ω—å: {second_level} –æ—Å—ñ–± ({second_level * 50} –≥—Ä–Ω)\n"
                f"‚îî‚îÄ‚îÄ 3-–π —Ä—ñ–≤–µ–Ω—å: {third_level} –æ—Å—ñ–± ({third_level * 25} –≥—Ä–Ω)\n\n"
                f"üîó –í–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n"
                f"t.me/yourbot?start={user.referral_code}"
            )

            keyboard = [[InlineKeyboardButton("üì§ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º", url=f"https://t.me/yourbot?start={user.referral_code}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(stats_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è!")


async def request_tour(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–ø–∏—Ç—É –Ω–∞ –ø—ñ–¥–±—ñ—Ä —Ç—É—Ä—É"""
    user_id = update.effective_user.id
    with Session() as session:
        user = session.query(User).filter_by(telegram_id=user_id).first()

        if user:
            await update.message.reply_text(
                "–û–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è –¥–æ —Ç—É—Ä—É\n"
                "(–∫—Ä–∞—ó–Ω–∞, –¥–∞—Ç–∏, –±—é–¥–∂–µ—Ç, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—ñ–±):"
            )
            context.user_data['waiting_for_tour_request'] = True
        else:
            await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è!")


async def handle_tour_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç—É –∑ –æ–ø–∏—Å–æ–º —Ç—É—Ä—É"""
    if context.user_data.get('waiting_for_tour_request'):
        user_id = update.effective_user.id
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()

            if user:
                tour_request = TourRequest(
                    user_id=user.id,
                    description=update.message.text
                )
                session.add(tour_request)
                session.commit()

                await update.message.reply_text(
                    "–î—è–∫—É—é! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
                    "–ó –≤–∞–º–∏ –∑–≤'—è–∂—É—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º –≥–æ–¥–∏–Ω–∏! ‚úÖ"
                )
                context.user_data['waiting_for_tour_request'] = False
            else:
                await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è!")