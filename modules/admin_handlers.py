import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from .models import Session, User, ReferralBonus, TourRequest
from sqlalchemy import func
from .redis_client import (
    get_user_data, get_tour_request_status,
    set_tour_request_status, set_tour_request_data, get_recent_requests,
    set_user_data, get_user_balance, increment_user_balance,
    get_users_list, set_users_list, get_system_stats, set_system_stats,
    clear_users_list_cache
)


def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º - Redis first"""
    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ Redis
    user_data = get_user_data(str(user_id))
    if user_data:
        return user_data.get('is_admin', False)

    # –Ø–∫—â–æ –Ω–µ–º–∞—î –≤ Redis - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ –ë–î —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Redis
    with Session() as session:
        user = session.query(User).filter_by(telegram_id=str(user_id)).first()
        if user:
            user_data = {
                'id': user.id,
                'telegram_id': str(user.telegram_id),
                'phone_number': user.phone_number,
                'referral_code': user.referral_code,
                'referred_by': user.referred_by,
                'balance': user.balance,
                'is_admin': user.is_admin,
                'created_at': user.created_at.strftime('%d.%m.%Y')
            }
            set_user_data(str(user_id), user_data)
            return user.is_admin
        return False


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ!")
        return

    keyboard = [
        [KeyboardButton("üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"), KeyboardButton("üìã –ó–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä–∏")],
        [KeyboardButton("üí∞ –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤")],
        [KeyboardButton("üë§ –†–µ–∂–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üîß –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨\n\n"
        "–í–∏ —É–≤—ñ–π—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:",
        reply_markup=reply_markup
    )


def get_users_from_cache_or_db(limit=10, offset=0):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ Redis –∞–±–æ –ë–î"""
    # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –∑ –ë–î
    with Session() as session:
        users = session.query(User).offset(offset).limit(limit).all()
        users_data = []

        for user in users:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ –ë–î
            user_data = {
                'id': user.id,
                'telegram_id': str(user.telegram_id),
                'phone_number': user.phone_number,
                'referral_code': user.referral_code,
                'referred_by': user.referred_by,
                'balance': user.balance,
                'is_admin': user.is_admin,
                'created_at': user.created_at.strftime('%d.%m.%Y')
            }
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –≤ Redis
            set_user_data(str(user.telegram_id), user_data)
            users_data.append(user_data)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –≤ –∫–µ—à –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω
        set_users_list(offset, limit, users_data, 300)
        return users_data


async def show_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    if not is_admin(update.effective_user.id):
        return

    keyboard = [
        [InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–¥ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data='admin_users_list')],
        [InlineKeyboardButton("üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data='admin_users_search')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "üë• –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú–ò\n\n–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é:"

    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)


async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    if not is_admin(update.effective_user.id):
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ë–î
    users_data = get_users_from_cache_or_db(limit=10)

    text = "üë• –°–ü–ò–°–û–ö –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í:\n\n"

    if users_data:
        for user_data in users_data:
            admin_mark = " üëë" if user_data.get('is_admin') else ""
            text += (
                f"ID: {user_data['id']}{admin_mark}\n"
                f"üì± {user_data['phone_number']}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']} –≥—Ä–Ω\n"
                f"üîó –ö–æ–¥: {user_data['referral_code']}\n"
                f"üìÖ {user_data.get('created_at', '')}\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )
    else:
        text = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ—à—É–∫", callback_data='admin_users_search')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_users')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)


def find_user_by_id_or_phone(identifier):
    """–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º"""
    with Session() as session:
        try:
            user_id = int(identifier)
            user = session.query(User).get(user_id) or session.query(User).filter_by(telegram_id=str(user_id)).first()
        except ValueError:
            # –¶–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
            user = session.query(User).filter_by(phone_number=identifier).first()

        if user:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ –ë–î
            user_data = {
                'id': user.id,
                'telegram_id': str(user.telegram_id),
                'phone_number': user.phone_number,
                'referral_code': user.referral_code,
                'referred_by': user.referred_by,
                'balance': user.balance,
                'is_admin': user.is_admin,
                'created_at': user.created_at.strftime('%d.%m.%Y')
            }
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –≤ Redis
            set_user_data(str(user.telegram_id), user_data)
            return user_data

    return None


async def search_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not is_admin(update.effective_user.id):
        return

    text = "–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø–æ—à—É–∫—É:\n–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å '–≤–∏–π—Ç–∏'"

    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.message.edit_text(text)
    else:
        await update.message.reply_text(text)

    context.user_data['waiting_for_user_search'] = True


async def handle_user_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ"""
    if not is_admin(update.effective_user.id):
        return

    if not context.user_data.get('waiting_for_user_search'):
        return

    identifier = update.message.text.strip()

    if identifier.lower() in ['–≤–∏–π—Ç–∏', 'exit', 'cancel', '—Å–∫–∞—Å—É–≤–∞—Ç–∏']:
        context.user_data.pop('waiting_for_user_search', None)
        await update.message.reply_text("‚ùå –ü–æ—à—É–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ –ë–î
    with Session() as session:
        try:
            user_id = int(identifier)
            user = session.query(User).get(user_id) or session.query(User).filter_by(telegram_id=str(user_id)).first()
        except ValueError:
            # –¶–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
            user = session.query(User).filter_by(phone_number=identifier).first()

        if user:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –ë–î
            total_referrals = session.query(User).filter_by(referred_by=user.id).count()
            total_bonuses = session.query(ReferralBonus).filter_by(user_id=user.id).count()
            total_bonus_amount = session.query(ReferralBonus).filter_by(user_id=user.id).with_entities(
                func.sum(ReferralBonus.amount)).scalar() or 0

            text = (
                f"üë§ –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ö–û–†–ò–°–¢–£–í–ê–ß–ê\n\n"
                f"üÜî ID: {user.id}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance} –≥—Ä–Ω\n"
                f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥: {user.referral_code}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {user.created_at.strftime('%d.%m.%Y')}\n"
                f"üë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {total_referrals}\n"
                f"üéÅ –û—Ç—Ä–∏–º–∞–Ω–æ –±–æ–Ω—É—Å—ñ–≤: {total_bonuses}\n"
                f"üíµ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –±–æ–Ω—É—Å—ñ–≤: {total_bonus_amount} –≥—Ä–Ω\n"
                f"{'üëë –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä' if user.is_admin else ''}"
            )

            keyboard = [
                [InlineKeyboardButton("üí∞ –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–æ–Ω—É—Å", callback_data=f'bonus_user_{user.id}')],
                [InlineKeyboardButton("üìä –Ü—Å—Ç–æ—Ä—ñ—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å", callback_data=f'bonus_history_{user.id}')],
                [InlineKeyboardButton("üîç –ü–æ—à—É–∫ —ñ–Ω—à–æ–≥–æ", callback_data='admin_users_search')],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_users')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(
                "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–≤–∏–π—Ç–∏' –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:"
            )

    context.user_data.pop('waiting_for_user_search', None)


def get_system_statistics():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - Redis first"""
    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
    cached_stats = get_system_stats()
    if cached_stats:
        return cached_stats

    # –Ø–∫—â–æ –Ω–µ–º–∞—î –≤ –∫–µ—à—ñ - —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑ –ë–î
    with Session() as session:
        total_users = session.query(User).count()
        active_users = session.query(User).filter(User.balance > 0).count()
        total_referrals = session.query(User).filter(User.referred_by.isnot(None)).count()
        total_bonuses = session.query(ReferralBonus).count()
        total_bonus_amount = session.query(func.sum(ReferralBonus.amount)).scalar() or 0

        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –∑ Redis (–±—ñ–ª—å—à –∞–∫—Ç—É–∞–ª—å–Ω–∏–π)
        total_balance = 0
        users = session.query(User.telegram_id).all()
        for user in users:
            balance = get_user_balance(str(user.telegram_id))
            if balance:
                total_balance += float(balance)

        stats = {
            'total_users': total_users,
            'active_users': active_users,
            'total_balance': total_balance,
            'total_referrals': total_referrals,
            'total_bonuses': total_bonuses,
            'total_bonus_amount': float(total_bonus_amount)
        }

        # –ö–µ—à—É—î–º–æ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω
        set_system_stats(stats, 600)
        return stats


async def show_users_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ - –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ"""
    if not is_admin(update.effective_user.id):
        return

    stats = get_system_statistics()

    text = (
        "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í\n\n"
        f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['active_users']}\n"
        f"üë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {stats['total_referrals']}\n"
        f"üéÅ –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å—ñ–≤: {stats['total_bonuses']}\n"
        f"üíµ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –±–æ–Ω—É—Å—ñ–≤: {stats['total_bonus_amount']:.2f} –≥—Ä–Ω"
    )

    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_users')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)


async def show_users_for_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—É - –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ"""
    if not is_admin(update.effective_user.id):
        return

    if hasattr(update, 'callback_query') and update.callback_query:
        user_id = int(update.callback_query.data.split('_')[2])

        # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ Redis
        user_data = None
        with Session() as session:
            user = session.query(User).get(user_id)
            if user:
                user_data = get_user_data(str(user.telegram_id))
                if not user_data:
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Redis —è–∫—â–æ –Ω–µ–º–∞—î
                    user_data = {
                        'id': user.id,
                        'telegram_id': str(user.telegram_id),
                        'phone_number': user.phone_number,
                        'referral_code': user.referral_code,
                        'referred_by': user.referred_by,
                        'balance': user.balance,
                        'is_admin': user.is_admin,
                        'created_at': user.created_at.strftime('%d.%m.%Y')
                    }
                    set_user_data(str(user.telegram_id), user_data)

        if user_data:
            balance = get_user_balance(user_data['telegram_id']) or user_data.get('balance', 0)
            context.user_data['bonus_user_id'] = user_data['id']
            context.user_data['bonus_user_phone'] = user_data['phone_number']
            context.user_data['bonus_user_telegram_id'] = user_data['telegram_id']

            await update.callback_query.message.edit_text(
                f"–ó–Ω–∞–π–¥–µ–Ω–æ: {user_data['phone_number']}\n"
                f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} –≥—Ä–Ω\n\n"
                f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:"
            )
            context.user_data['waiting_for_bonus_amount'] = True
        else:
            await update.callback_query.message.edit_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    else:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
        context.user_data['waiting_for_user_identifier'] = True


async def handle_user_identifier(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è ID –∞–±–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ"""
    if not is_admin(update.effective_user.id):
        return

    identifier = update.message.text.strip()

    if identifier.lower() in ['–≤–∏–π—Ç–∏', 'exit', 'cancel', '—Å–∫–∞—Å—É–≤–∞—Ç–∏']:
        context.user_data.pop('waiting_for_user_identifier', None)
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        return

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –ø–æ—à—É–∫—É
    user_data = find_user_by_id_or_phone(identifier)

    if user_data:
        balance = get_user_balance(user_data['telegram_id']) or user_data.get('balance', 0)
        context.user_data['bonus_user_id'] = user_data['id']
        context.user_data['bonus_user_phone'] = user_data['phone_number']
        context.user_data['bonus_user_telegram_id'] = user_data['telegram_id']

        await update.message.reply_text(
            f"–ó–Ω–∞–π–¥–µ–Ω–æ: {user_data['phone_number']}\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} –≥—Ä–Ω\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:"
        )
        context.user_data['waiting_for_user_identifier'] = False
        context.user_data['waiting_for_bonus_amount'] = True
    else:
        await update.message.reply_text(
            "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–≤–∏–π—Ç–∏' –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:"
        )


async def handle_bonus_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ—ó —Å—É–º–∏ –±–æ–Ω—É—Å—É"""
    if not is_admin(update.effective_user.id):
        return

    try:
        amount = float(update.message.text)
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0!")
            return

        context.user_data['bonus_amount'] = amount
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –¥–ª—è –±–æ–Ω—É—Å—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '–ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'):"
        )
        context.user_data['waiting_for_bonus_amount'] = False
        context.user_data['waiting_for_bonus_description'] = True

    except ValueError:
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É!")


async def handle_bonus_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –æ–ø–∏—Å—É –±–æ–Ω—É—Å—É —Ç–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è"""
    if not is_admin(update.effective_user.id):
        return

    user_id = context.user_data.get('bonus_user_id')
    amount = context.user_data.get('bonus_amount')
    description = update.message.text

    with Session() as session:
        user = session.query(User).get(user_id)
        if user:
            # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–æ–Ω—É—Å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
            user.balance += amount
            bonus = ReferralBonus(
                user_id=user.id,
                amount=amount,
                description=description
            )
            session.add(bonus)
            session.commit()

            # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –≤ Redis
            increment_user_balance(str(user.telegram_id), amount)

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            try:
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text=f"üí∞ –í–∞–º –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ +{amount} –≥—Ä–Ω!\n"
                         f"üí¨ {description}"
                )
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.telegram_id}: {str(e)}")

            await update.message.reply_text(
                f"‚úÖ –ë–æ–Ω—É—Å —É—Å–ø—ñ—à–Ω–æ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ!\n"
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.phone_number}\n"
                f"üí∞ –°—É–º–∞: {amount} –≥—Ä–Ω\n"
                f"üí¨ –û–ø–∏—Å: {description}"
            )
        else:
            await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

    # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
    context.user_data.pop('selected_user_id', None)
    context.user_data.pop('bonus_amount', None)
    context.user_data.pop('waiting_for_bonus_description', None)


def get_tour_requests_from_cache_or_db():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞—è–≤–∫–∏ –∑ Redis –∞–±–æ –ë–î"""
    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
    cached_requests = get_recent_requests()
    if cached_requests:
        return cached_requests

    # –Ø–∫—â–æ –Ω–µ–º–∞—î –≤ –∫–µ—à—ñ - –æ—Ç—Ä–∏–º—É—î–º–æ –∑ –ë–î
    with Session() as session:
        new_requests = session.query(TourRequest).filter_by(status='new').order_by(TourRequest.created_at.desc()).all()
        processed_requests = session.query(TourRequest).filter_by(status='end').order_by(
            TourRequest.created_at.desc()).limit(5).all()

        requests_data = {
            'new': [],
            'processed': []
        }

        # –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–æ–≤—ñ –∑–∞—è–≤–∫–∏
        for request in new_requests:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user = session.query(User).get(request.user_id)
            user_data = get_user_data(str(user.telegram_id))
            if not user_data:
                user_data = {
                    'id': user.id,
                    'telegram_id': str(user.telegram_id),
                    'phone_number': user.phone_number,
                    'referral_code': user.referral_code,
                    'referred_by': user.referred_by,
                    'balance': user.balance,
                    'is_admin': user.is_admin,
                    'created_at': user.created_at.strftime('%d.%m.%Y')
                }
                set_user_data(str(user.telegram_id), user_data)

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∑–∞—è–≤–∫–∏ –≤ Redis
            request_data = {
                'id': request.id,
                'user_id': request.user_id,
                'description': request.description,
                'status': request.status,
                'created_at': request.created_at.strftime('%d.%m.%Y %H:%M'),
                'user_phone': user_data['phone_number']
            }
            set_tour_request_data(request.id, request_data)
            requests_data['new'].append(request_data)

        # –û–±—Ä–æ–±–ª—è—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –∑–∞—è–≤–∫–∏
        for request in processed_requests:
            user = session.query(User).get(request.user_id)
            user_data = get_user_data(str(user.telegram_id))
            if not user_data:
                user_data = {
                    'id': user.id,
                    'telegram_id': str(user.telegram_id),
                    'phone_number': user.phone_number,
                    'referral_code': user.referral_code,
                    'referred_by': user.referred_by,
                    'balance': user.balance,
                    'is_admin': user.is_admin,
                    'created_at': user.created_at.strftime('%d.%m.%Y')
                }
                set_user_data(str(user.telegram_id), user_data)

            request_data = {
                'id': request.id,
                'user_id': request.user_id,
                'description': request.description,
                'status': request.status,
                'created_at': request.created_at.strftime('%d.%m.%Y %H:%M'),
                'user_phone': user_data['phone_number']
            }
            set_tour_request_data(request.id, request_data)
            requests_data['processed'].append(request_data)

        return requests_data


async def show_tour_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç—É—Ä–∏"""
    with Session() as session:
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ –∑–∞—è–≤–∫–∏
        new_requests = session.query(TourRequest).filter_by(status='new').order_by(TourRequest.created_at.desc()).all()

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –∑–∞—è–≤–∫–∏
        processed_requests = session.query(TourRequest).filter_by(status='end').order_by(TourRequest.created_at.desc()).limit(5).all()

        text = "üìã –ó–ê–Ø–í–ö–ò –ù–ê –¢–£–†–ò\n\n"

        if new_requests:
            text += "üÜï –ù–û–í–Ü –ó–ê–Ø–í–ö–ò:\n"
            for request in new_requests:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ Redis
                status = get_tour_request_status(request.id) or 'new'

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Redis
                user = session.query(User).get(request.user_id)
                user_data = get_user_data(str(user.telegram_id))
                if not user_data:
                    user_data = {
                        'telegram_id': str(user.telegram_id),
                        'phone_number': user.phone_number,
                        'referral_code': user.referral_code,
                        'referred_by': user.referred_by,
                        'balance': user.balance,
                        'is_admin': user.is_admin
                    }
                    set_user_data(str(user.telegram_id), user_data)

                text += f"‚îú‚îÄ‚îÄ ID: {request.id}\n"
                text += f"‚îú‚îÄ‚îÄ –ö–ª—ñ—î–Ω—Ç: {user_data['phone_number']}\n"
                text += f"‚îú‚îÄ‚îÄ –°—Ç–∞—Ç—É—Å: {status}\n"
                text += f"‚îî‚îÄ‚îÄ –°—Ç–≤–æ—Ä–µ–Ω–æ: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        else:
            text += "üÜï –ù–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–µ–º–∞—î\n\n"

        if processed_requests:
            text += "‚úÖ –û–ë–†–û–ë–õ–ï–ù–Ü –ó–ê–Ø–í–ö–ò:\n"
            for request in processed_requests:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ Redis
                status = get_tour_request_status(request.id) or 'end'

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Redis
                user = session.query(User).get(request.user_id)
                user_data = get_user_data(str(user.telegram_id))
                if not user_data:
                    user_data = {
                        'telegram_id': str(user.telegram_id),
                        'phone_number': user.phone_number,
                        'referral_code': user.referral_code,
                        'referred_by': user.referred_by,
                        'balance': user.balance,
                        'is_admin': user.is_admin
                    }
                    set_user_data(str(user.telegram_id), user_data)

                text += f"‚îú‚îÄ‚îÄ ID: {request.id}\n"
                text += f"‚îú‚îÄ‚îÄ –ö–ª—ñ—î–Ω—Ç: {user_data['phone_number']}\n"
                text += f"‚îú‚îÄ‚îÄ –°—Ç–∞—Ç—É—Å: {status}\n"
                text += f"‚îî‚îÄ‚îÄ –°—Ç–≤–æ—Ä–µ–Ω–æ: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        else:
            text += "‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–µ–º–∞—î\n\n"

        keyboard = []
        for request in new_requests:
            keyboard.append([InlineKeyboardButton(f"–ó–∞—è–≤–∫–∞ #{request.id}", callback_data=f"tour_request_{request.id}")])

        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_tours")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)


async def show_tour_request_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä"""
    request_id = int(update.callback_query.data.split('_')[2])

    with Session() as session:
        request = session.query(TourRequest).get(request_id)
        if request:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Redis
            user = session.query(User).get(request.user_id)
            user_data = get_user_data(str(user.telegram_id))
            if not user_data:
                user_data = {
                    'telegram_id': str(user.telegram_id),
                    'phone_number': user.phone_number,
                    'referral_code': user.referral_code,
                    'referred_by': user.referred_by,
                    'balance': user.balance,
                    'is_admin': user.is_admin
                }
                set_user_data(str(user.telegram_id), user_data)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ Redis
            status = get_tour_request_status(request.id) or request.status

            text = f"üìã –î–ï–¢–ê–õ–Ü –ó–ê–Ø–í–ö–ò #{request.id}\n\n"
            text += f"üë§ –ö–ª—ñ—î–Ω—Ç: {user_data['phone_number']}\n"
            text += f"üìù –û–ø–∏—Å:\n{request.description}\n\n"
            text += f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"

            keyboard = []
            if status == 'new':
                keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É", callback_data=f"complete_request_{request.id}")])
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_tours_list")])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)


async def complete_tour_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä"""
    request_id = int(update.callback_query.data.split('_')[2])

    with Session() as session:
        request = session.query(TourRequest).get(request_id)
        if request and request.status == 'new':
            request.status = 'end'
            session.commit()

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ Redis
            set_tour_request_status(request_id, 'end')

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Redis
            user = session.query(User).get(request.user_id)
            user_data = get_user_data(str(user.telegram_id))
            if not user_data:
                user_data = {
                    'telegram_id': str(user.telegram_id),
                    'phone_number': user.phone_number,
                    'referral_code': user.referral_code,
                    'referred_by': user.referred_by,
                    'balance': user.balance,
                    'is_admin': user.is_admin
                }
                set_user_data(str(user.telegram_id), user_data)

            await show_tour_requests(update, context)


async def show_bonus_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —ñ—Å—Ç–æ—Ä—ñ—ó –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not is_admin(update.effective_user.id):
        return

    user_id = int(update.callback_query.data.split('_')[2])
    
    with Session() as session:
        user = session.query(User).get(user_id)
        if not user:
            await update.callback_query.message.edit_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Redis
        user_data = get_user_data(str(user.telegram_id))
        if not user_data:
            user_data = {
                'telegram_id': str(user.telegram_id),
                'phone_number': user.phone_number,
                'referral_code': user.referral_code,
                'referred_by': user.referred_by,
                'balance': user.balance,
                'is_admin': user.is_admin
            }
            set_user_data(str(user.telegram_id), user_data)

        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å
        bonuses = session.query(ReferralBonus).filter_by(user_id=user_id).order_by(ReferralBonus.created_at.desc()).all()

        if bonuses:
            text = f"üìä –Ü–°–¢–û–†–Ü–Ø –ù–ê–†–ê–•–£–í–ê–ù–¨\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_data['phone_number']}\n\n"
            for bonus in bonuses:
                text += (
                    f"üí∞ {bonus.amount} –≥—Ä–Ω\n"
                    f"üìù {bonus.description}\n"
                    f"üìÖ {bonus.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                )
        else:
            text = f"üìä –Ü–°–¢–û–†–Ü–Ø –ù–ê–†–ê–•–£–í–ê–ù–¨\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_data['phone_number']}\n\n–Ü—Å—Ç–æ—Ä—ñ—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å –ø–æ—Ä–æ–∂–Ω—è"

        keyboard = [
            [InlineKeyboardButton("üí∞ –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–æ–Ω—É—Å", callback_data=f'bonus_user_{user_id}')],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_users')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.message.edit_text(text, reply_markup=reply_markup)


async def show_tour_requests_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–æ–±–æ—Ç–∏ –∑ –∑–∞—è–≤–∫–∞–º–∏"""
    if not is_admin(update.effective_user.id):
        return

    keyboard = [
        [InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–¥ –≤—Å—ñ—Ö –∑–∞—è–≤–æ–∫", callback_data='admin_tours_list')],
        [InlineKeyboardButton("üîç –ü–æ—à—É–∫ –∑–∞—è–≤–∫–∏", callback_data='admin_tours_search')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "üèñ –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ó–ê–Ø–í–ö–ê–ú–ò\n\n–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é:"

    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)


async def search_tour_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –ø–æ—à—É–∫—É –∑–∞—è–≤–∫–∏"""
    if not is_admin(update.effective_user.id):
        return

    text = "–í–≤–µ–¥—ñ—Ç—å ID –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ—à—É–∫—É:\n–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å '–≤–∏–π—Ç–∏'"
    
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.message.edit_text(text)
    else:
        await update.message.reply_text(text)
    
    context.user_data['waiting_for_tour_search'] = True


async def handle_tour_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É –∑–∞—è–≤–∫–∏"""
    if not is_admin(update.effective_user.id):
        return

    if not context.user_data.get('waiting_for_tour_search'):
        return

    identifier = update.message.text.strip()
    
    if identifier.lower() in ['–≤–∏–π—Ç–∏', 'exit', 'cancel', '—Å–∫–∞—Å—É–≤–∞—Ç–∏']:
        context.user_data.pop('waiting_for_tour_search', None)
        await update.message.reply_text("‚ùå –ü–æ—à—É–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        return

    try:
        request_id = int(identifier)
        with Session() as session:
            request = session.query(TourRequest).get(request_id)
            if request:
                user = session.query(User).get(request.user_id)
                text = (
                    f"üèñ –î–ï–¢–ê–õ–Ü –ó–ê–Ø–í–ö–ò #{request.id}\n\n"
                    f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.phone_number if user else '–ù–µ–≤—ñ–¥–æ–º–∏–π'}\n"
                    f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìù –û–ø–∏—Å:\n{request.description}\n\n"
                    f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –û–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ' if request.status == 'end' else '‚è≥ –í –æ–±—Ä–æ–±—Ü—ñ'}"
                )

                keyboard = []
                if request.status == 'new':
                    keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É", callback_data=f'complete_request_{request.id}')])
                keyboard.extend([
                    [InlineKeyboardButton("üîç –ü–æ—à—É–∫ —ñ–Ω—à–æ—ó", callback_data='admin_tours_search')],
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_tours')]
                ])
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(
                    "‚ùå –ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–≤–∏–π—Ç–∏' –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:"
                )
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∑–∞—è–≤–∫–∏ (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ)!\n"
            "–ê–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–≤–∏–π—Ç–∏' –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:"
        )

    context.user_data.pop('waiting_for_tour_search', None)


async def set_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        return

    try:
        identifier = context.args[0]
        with Session() as session:
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
            try:
                user_id = int(identifier)
                user = session.query(User).get(user_id) or session.query(User).filter_by(telegram_id=str(user_id)).first()
            except ValueError:
                # –Ø–∫—â–æ –Ω–µ ID, —Ç–æ —à—É–∫–∞—î–º–æ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
                user = session.query(User).filter_by(phone_number=identifier).first()

            if user:
                user.is_admin = True
                session.commit()

                # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ Redis
                user_data = get_user_data(str(user.telegram_id))
                if user_data:
                    user_data['is_admin'] = True
                    set_user_data(str(user.telegram_id), user_data)

                # –û—á–∏—â–∞—î–º–æ –∫–µ—à —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                clear_users_list_cache()

                # –°–ø–æ–≤—ñ—â–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ –º–µ–Ω—é
                try:
                    keyboard = [
                        [KeyboardButton("üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"), KeyboardButton("üìã –ó–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä–∏")],
                        [KeyboardButton("üí∞ –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤")],
                        [KeyboardButton("üë§ –†–µ–∂–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–º—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text="üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ —Ç–µ–ø–µ—Ä –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏!\n"
                             "üõ† –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è.",
                        reply_markup=reply_markup
                    )

                    await update.message.reply_text(
                        f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.phone_number} —Ç–µ–ø–µ—Ä –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                        f"üì® –ô–æ–º—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –ø—Ä–∞–≤–∞"
                    )
                except Exception as e:
                    await update.message.reply_text(
                        f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.phone_number} —Ç–µ–ø–µ—Ä –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                        f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–º–æ–∂–ª–∏–≤–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞)"
                    )
            else:
                await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /set_admin <id –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É>")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")


async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–Ω—è—Ç—Ç—è –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        return

    try:
        identifier = context.args[0]
        with Session() as session:
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
            try:
                user_id = int(identifier)
                user = session.query(User).get(user_id) or session.query(User).filter_by(telegram_id=str(user_id)).first()
            except ValueError:
                # –Ø–∫—â–æ –Ω–µ ID, —Ç–æ —à—É–∫–∞—î–º–æ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
                user = session.query(User).filter_by(phone_number=identifier).first()

            if user and user.is_admin:
                user.is_admin = False
                session.commit()

                # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ Redis
                user_data = get_user_data(str(user.telegram_id))
                if user_data:
                    user_data['is_admin'] = False
                    set_user_data(str(user.telegram_id), user_data)

                # –û—á–∏—â–∞—î–º–æ –∫–µ—à —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                clear_users_list_cache()

                # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∑–≤–∏—á–∞–π–Ω–µ
                try:
                    keyboard = [
                        [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                        [KeyboardButton("üîó –ú–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è")],
                        [KeyboardButton("üèñ –ü—ñ–¥–±—ñ—Ä —Ç—É—Ä—É")],
                        [KeyboardButton("‚Ñπ –ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É")],
                        [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text="‚ÑπÔ∏è –í–∞—à—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∫–∞—Å–æ–≤–∞–Ω—ñ.\n"
                             "–ú–µ–Ω—é –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É.",
                        reply_markup=reply_markup
                    )

                    await update.message.reply_text(
                        f"‚úÖ –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.phone_number} —Å–∫–∞—Å–æ–≤–∞–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                    )
                except Exception as e:
                    await update.message.reply_text(
                        f"‚úÖ –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.phone_number} —Å–∫–∞—Å–æ–≤–∞–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                        f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–º–æ–∂–ª–∏–≤–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞)"
                    )
            else:
                await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /remove_admin <id –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É>")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")