import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from .models import Session, User, ReferralBonus, TourRequest
from sqlalchemy import func


def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    with Session() as session:
        user = session.query(User).filter_by(telegram_id=user_id).first()
        return user.is_admin if user else False


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ!")
        return

    # –ü–æ–∫–∞–∑—É—î–º–æ –∞–¥–º—ñ–Ω—Å—å–∫–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [KeyboardButton("üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"), KeyboardButton("üìã –ó–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä–∏")],
        [KeyboardButton("üí∞ –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏")],
        [KeyboardButton("üë§ –†–µ–∂–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üîß –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨\n\n"
        "–í–∏ —É–≤—ñ–π—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:",
        reply_markup=reply_markup
    )


async def show_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    if not is_admin(update.effective_user.id):
        return

    keyboard = [
        [InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–¥ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data='admin_users_list')],
        [InlineKeyboardButton("üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data='admin_users_search')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data='admin_users_stats')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "üë• –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú–ò\n\n–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é:"

    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)


async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    if not is_admin(update.effective_user.id):
        return

    with Session() as session:
        users = session.query(User).limit(10).all()

        if users:
            text = "üë• –°–ü–ò–°–û–ö –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í:\n\n"
            for user in users:
                admin_mark = " üëë" if user.is_admin else ""
                text += (
                    f"ID: {user.id}{admin_mark}\n"
                    f"üì± {user.phone_number}\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance} –≥—Ä–Ω\n"
                    f"üîó –ö–æ–¥: {user.referral_code}\n"
                    f"üìÖ {user.created_at.strftime('%d.%m.%Y')}\n"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                )

            keyboard = [
                [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data='admin_users_list')],
                [InlineKeyboardButton("üîç –ü–æ—à—É–∫", callback_data='admin_users_search')],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_users_stats')],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_users')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text, reply_markup=reply_markup)
        else:
            message = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.edit_text(message)
            else:
                await update.message.reply_text(message)


async def search_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not is_admin(update.effective_user.id):
        return

    text = "–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø–æ—à—É–∫—É:\n–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å '–≤–∏–π—Ç–∏'"
    
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.message.edit_text(text)
    else:
        await update.message.reply_text(text)
    
    context.user_data['waiting_for_user_search'] = True


async def handle_user_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not is_admin(update.effective_user.id):
        return

    if not context.user_data.get('waiting_for_user_search'):
        return

    identifier = update.message.text.strip()
    
    if identifier.lower() in ['–≤–∏–π—Ç–∏', 'exit', 'cancel', '—Å–∫–∞—Å—É–≤–∞—Ç–∏']:
        context.user_data.pop('waiting_for_user_search', None)
        await update.message.reply_text("‚ùå –ü–æ—à—É–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        return

    with Session() as session:
        user_id = int(identifier)
        user = session.query(User).get(user_id) or session.query(User).filter_by(phone_number=identifier).first()

        if user:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            total_referrals = session.query(User).filter_by(referred_by=user.id).count()
            total_bonuses = session.query(ReferralBonus).filter_by(user_id=user.id).count()
            total_bonus_amount = session.query(ReferralBonus).filter_by(user_id=user.id).with_entities(
                func.sum(ReferralBonus.amount)).scalar() or 0

            text = (
                f"üë§ –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ö–û–†–ò–°–¢–£–í–ê–ß–ê\n\n"
                f"üÜî ID: {user.id}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance} –≥—Ä–Ω\n"
                f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥: {user.referral_code}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {user.created_at.strftime('%d.%m.%Y')}\n"
                f"üë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {total_referrals}\n"
                f"üéÅ –û—Ç—Ä–∏–º–∞–Ω–æ –±–æ–Ω—É—Å—ñ–≤: {total_bonuses}\n"
                f"üíµ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –±–æ–Ω—É—Å—ñ–≤: {total_bonus_amount} –≥—Ä–Ω\n"
                f"{'üëë –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä' if user.is_admin else ''}"
            )

            keyboard = [
                [InlineKeyboardButton("üí∞ –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–æ–Ω—É—Å", callback_data=f'bonus_user_{user.id}')],
                [InlineKeyboardButton("üìä –Ü—Å—Ç–æ—Ä—ñ—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å", callback_data=f'bonus_history_{user.id}')],
                [InlineKeyboardButton("üîç –ü–æ—à—É–∫ —ñ–Ω—à–æ–≥–æ", callback_data='admin_users_search')],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_users')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(
                "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–≤–∏–π—Ç–∏' –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:"
            )

    context.user_data.pop('waiting_for_user_search', None)


async def show_users_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    if not is_admin(update.effective_user.id):
        return

    with Session() as session:
        total_users = session.query(User).count()
        active_users = session.query(User).filter(User.balance > 0).count()
        total_balance = session.query(func.sum(User.balance)).scalar() or 0
        total_referrals = session.query(User).filter(User.referred_by.isnot(None)).count()
        total_bonuses = session.query(ReferralBonus).count()
        total_bonus_amount = session.query(func.sum(ReferralBonus.amount)).scalar() or 0

        text = (
            "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í\n\n"
            f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {active_users}\n"
            f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {total_balance} –≥—Ä–Ω\n"
            f"üë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {total_referrals}\n"
            f"üéÅ –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å—ñ–≤: {total_bonuses}\n"
            f"üíµ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –±–æ–Ω—É—Å—ñ–≤: {total_bonus_amount} –≥—Ä–Ω"
        )

        keyboard = [
            [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data='admin_users_stats')],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_users')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)


async def show_users_for_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—É"""
    if not is_admin(update.effective_user.id):
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ callback_data
    if hasattr(update, 'callback_query') and update.callback_query:
        user_id = int(update.callback_query.data.split('_')[2])
        with Session() as session:
            user = session.query(User).get(user_id)
            if user:
                context.user_data['bonus_user_id'] = user.id
                context.user_data['bonus_user_phone'] = user.phone_number
                await update.callback_query.message.edit_text(
                    f"–ó–Ω–∞–π–¥–µ–Ω–æ: {user.phone_number}\n"
                    f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} –≥—Ä–Ω\n\n"
                    f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:"
                )
                context.user_data['waiting_for_bonus_amount'] = True
            else:
                await update.callback_query.message.edit_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    else:
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:"
        )
        context.user_data['waiting_for_user_identifier'] = True


async def handle_user_identifier(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è ID –∞–±–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not is_admin(update.effective_user.id):
        return

    identifier = update.message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –≤–∏–π—Ç–∏
    if identifier.lower() in ['–≤–∏–π—Ç–∏', 'exit', 'cancel', '—Å–∫–∞—Å—É–≤–∞—Ç–∏']:
        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        context.user_data.pop('waiting_for_user_identifier', None)
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ"
        )
        return

    with Session() as session:
        # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID –∞–±–æ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É
        user_id = int(identifier)
        user = session.query(User).get(user_id) or session.query(User).filter_by(phone_number=identifier).first()

        if user:
            context.user_data['bonus_user_id'] = user.id
            context.user_data['bonus_user_phone'] = user.phone_number
            await update.message.reply_text(
                f"–ó–Ω–∞–π–¥–µ–Ω–æ: {user.phone_number}\n"
                f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} –≥—Ä–Ω\n\n"
                f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:"
            )
            context.user_data['waiting_for_user_identifier'] = False
            context.user_data['waiting_for_bonus_amount'] = True
        else:
            await update.message.reply_text(
                "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–≤–∏–π—Ç–∏' –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:"
            )


async def handle_bonus_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –±–æ–Ω—É—Å—É"""
    if not is_admin(update.effective_user.id):
        return

    if context.user_data.get('waiting_for_bonus_amount'):
        amount = update.message.text.strip()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –≤–∏–π—Ç–∏
        if amount.lower() in ['–≤–∏–π—Ç–∏', 'exit', 'cancel', '—Å–∫–∞—Å—É–≤–∞—Ç–∏']:
            # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            context.user_data.pop('waiting_for_bonus_amount', None)
            context.user_data.pop('bonus_user_id', None)
            context.user_data.pop('bonus_user_phone', None)
            await update.message.reply_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ"
            )
            return

        try:
            amount = float(amount)
            if amount <= 0:
                raise ValueError("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")

            context.user_data['bonus_amount'] = amount
            await update.message.reply_text(
                "–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:"
            )
            context.user_data['waiting_for_bonus_amount'] = False
            context.user_data['waiting_for_bonus_description'] = True
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 0)!\n"
                "–ê–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–≤–∏–π—Ç–∏' –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:"
            )


async def handle_bonus_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –æ–ø–∏—Å—É –±–æ–Ω—É—Å—É"""
    if not is_admin(update.effective_user.id):
        return

    if context.user_data.get('waiting_for_bonus_description'):
        description = update.message.text.strip()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –≤–∏–π—Ç–∏
        if description.lower() in ['–≤–∏–π—Ç–∏', 'exit', 'cancel', '—Å–∫–∞—Å—É–≤–∞—Ç–∏']:
            # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            context.user_data.pop('waiting_for_bonus_description', None)
            context.user_data.pop('bonus_user_id', None)
            context.user_data.pop('bonus_user_phone', None)
            context.user_data.pop('bonus_amount', None)
            await update.message.reply_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ"
            )
            return

        user_id = context.user_data['bonus_user_id']
        amount = context.user_data['bonus_amount']

        with Session() as session:
            user = session.query(User).get(user_id)
            if user:
                # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–æ–Ω—É—Å
                user.balance += amount
                bonus = ReferralBonus(
                    user_id=user.id,
                    amount=amount,
                    description=description
                )
                session.add(bonus)
                session.commit()

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
                await update.message.reply_text(
                    f"‚úÖ –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ {amount} –≥—Ä–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.phone_number}\n"
                    f"–ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} –≥—Ä–Ω"
                )

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=f"üí∞ –í–∞–º –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ +{amount} –≥—Ä–Ω!\n"
                             f"üí¨ –ü—Ä–∏—á–∏–Ω–∞: {description}"
                    )
                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.telegram_id}: {str(e)}")

            # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            context.user_data.pop('bonus_user_id', None)
            context.user_data.pop('bonus_user_phone', None)
            context.user_data.pop('bonus_amount', None)
            context.user_data.pop('waiting_for_bonus_description', None)


async def show_tour_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—ñ–¥–±—ñ—Ä —Ç—É—Ä—ñ–≤"""
    if not is_admin(update.effective_user.id):
        return

    with Session() as session:
        requests = session.query(TourRequest).filter_by(status='new').limit(10).all()

        if requests:
            text = "üèñ –ù–û–í–Ü –ó–ê–Ø–í–ö–ò –ù–ê –¢–£–†–ò:\n\n"
            for req in requests:
                user = session.query(User).get(req.user_id)
                text += (
                    f"üÜî {req.id}\n"
                    f"üë§ {user.phone_number if user else '–ù–µ–≤—ñ–¥–æ–º–∏–π'}\n"
                    f"üìù {req.description[:100]}{'...' if len(req.description) > 100 else ''}\n"
                    f"üìÖ {req.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                )
        else:
            text = "üì≠ –ù–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–µ–º–∞—î"

        keyboard = [[InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data='admin_tours')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)


async def set_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        return

    try:
        user_id = int(context.args[0])
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()

            if user:
                user.is_admin = True
                session.commit()

                # –°–ø–æ–≤—ñ—â–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ –º–µ–Ω—é
                try:
                    keyboard = [
                        [KeyboardButton("üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"), KeyboardButton("üìã –ó–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä–∏")],
                        [KeyboardButton("üí∞ –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏")],
                        [KeyboardButton("üë§ –†–µ–∂–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–º—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ —Ç–µ–ø–µ—Ä –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏!\n"
                             "üõ† –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è.",
                        reply_markup=reply_markup
                    )

                    await update.message.reply_text(
                        f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.phone_number} —Ç–µ–ø–µ—Ä –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                        f"üì® –ô–æ–º—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –ø—Ä–∞–≤–∞"
                    )
                except Exception as e:
                    await update.message.reply_text(
                        f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.phone_number} —Ç–µ–ø–µ—Ä –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                        f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–º–æ–∂–ª–∏–≤–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞)"
                    )
            else:
                await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º Telegram ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /setadmin <telegram_id>")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")


async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–Ω—è—Ç—Ç—è –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        return

    try:
        user_id = int(context.args[0])
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()

            if user and user.is_admin:
                user.is_admin = False
                session.commit()

                # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∑–≤–∏—á–∞–π–Ω–µ
                try:
                    keyboard = [
                        [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                        [KeyboardButton("üîó –ú–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è")],
                        [KeyboardButton("üèñ –ü—ñ–¥–±—ñ—Ä —Ç—É—Ä—É")],
                        [KeyboardButton("‚Ñπ –ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É")],
                        [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                    await context.bot.send_message(
                        chat_id=user_id,
                        text="‚ÑπÔ∏è –í–∞—à—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∫–∞—Å–æ–≤–∞–Ω—ñ.\n"
                             "–ú–µ–Ω—é –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É.",
                        reply_markup=reply_markup
                    )

                    await update.message.reply_text(
                        f"‚úÖ –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.phone_number} —Å–∫–∞—Å–æ–≤–∞–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                    )
                except:
                    await update.message.reply_text(
                        f"‚úÖ –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.phone_number} —Å–∫–∞—Å–æ–≤–∞–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                        f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
                    )
            else:
                await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /removeadmin <telegram_id>")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")


async def show_bonus_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —ñ—Å—Ç–æ—Ä—ñ—ó –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not is_admin(update.effective_user.id):
        return

    user_id = int(update.callback_query.data.split('_')[2])
    
    with Session() as session:
        user = session.query(User).get(user_id)
        if not user:
            await update.callback_query.message.edit_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å
        bonuses = session.query(ReferralBonus).filter_by(user_id=user_id).order_by(ReferralBonus.created_at.desc()).all()

        if bonuses:
            text = f"üìä –Ü–°–¢–û–†–Ü–Ø –ù–ê–†–ê–•–£–í–ê–ù–¨\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.phone_number}\n\n"
            for bonus in bonuses:
                text += (
                    f"üí∞ {bonus.amount} –≥—Ä–Ω\n"
                    f"üìù {bonus.description}\n"
                    f"üìÖ {bonus.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                )
        else:
            text = f"üìä –Ü–°–¢–û–†–Ü–Ø –ù–ê–†–ê–•–£–í–ê–ù–¨\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.phone_number}\n\n–Ü—Å—Ç–æ—Ä—ñ—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å –ø–æ—Ä–æ–∂–Ω—è"

        keyboard = [
            [InlineKeyboardButton("üí∞ –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–æ–Ω—É—Å", callback_data=f'bonus_user_{user_id}')],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f'search_user_{user_id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.message.edit_text(text, reply_markup=reply_markup)